import mysql, { Connection, ConnectionConfig, MysqlError } from 'mysql';

export class MySqlManager {
    private connection: Connection;
    private config: ConnectionConfig = {
        host: 'localhost',
        user: 'root',
        password: '',
        database: 'quran',
        multipleStatements: true,
    }
    constructor(config?: ConnectionConfig) {
        if (config) {
            this.config = config;
        } 
        this.connection = mysql.createConnection(this.config);
        this.connect();
    }

    connect(): Promise<string> {
        return new Promise((resolve, reject) => {
            this.connection.connect((err: MysqlError) => {
                if (err) {
                    reject(`Error connecting to the database: ${err.stack}`);
                } else {
                    resolve('Connected to the database.');
                    console.log('Connected to the database.');
                }
            });
        });
    }

    query(sql: string, params: any[] = []): Promise<any> {
        return new Promise((resolve, reject) => {
            this.connection.query(sql, params, (err: MysqlError | null, results: any) => {
                if (err) {
                    reject(`Query error: ${err.message}`);
                } else {
                    resolve(results);
                }
            });
        });
    }

    close(): Promise<string> {
        return new Promise((resolve, reject) => {
            this.connection.end((err: MysqlError | undefined) => {
                if (err) {
                    reject(`Error closing the connection: ${err.message}`);
                } else {
                    resolve('Connection closed.');
                }
            });
        });
    }

    static instance: MySqlManager;

    static getInstance() {
        if (!MySqlManager.instance) {
            MySqlManager.instance = new MySqlManager();
        }
        return MySqlManager.instance;
    }
}
